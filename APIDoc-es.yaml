openapi: 3.0.3
info:
  title: API de Nodepop
  description: |
    Nodepop es una API diseñada para gestionar productos, usuarios y etiquetas en una plataforma de comercio. Esta API proporciona operaciones CRUD para productos, soporta manejo de imágenes, aplica filtros y permite consultas por usuario.

    **Características**:  
    - Filtros avanzados para buscar productos por precio, nombre y etiquetas.  
    - Paginación y ordenamiento para grandes conjuntos de datos.  
    - Gestión de usuarios con productos asociados.  
    - Soporte para carga de imágenes de productos.  
    - Rutas de usuarios para gestionar información personal, cambiar contraseñas y listar usuarios.

    **Ejemplo de Uso**:  
    - Obtener productos filtrados: `/api/products?tag=lifestyle&min-price=100&max-price=900`.  
    - Crear un nuevo producto enviando datos en el cuerpo de la solicitud.
    - Listar usuarios con filtros opcionales: `/api/users?country=USA`.
    - Cambiar la contraseña de un usuario: `/api/users-change-password/{userId}` enviando las contraseñas actuales y nuevas.

    
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Servidor local
paths:
  /api/products:
    get:
      summary: Recuperar una lista de productos
      description: Recuperar una lista de productos basada en filtros, paginación y criterios de ordenamiento.
      parameters:
        - in: query
          name: tag
          schema:
            type: string
          description: Filtrar productos por etiqueta.
        - in: query
          name: min-price
          schema:
            type: number
          description: Precio mínimo de los productos.
        - in: query
          name: max-price
          schema:
            type: number
          description: Precio máximo de los productos.
        - in: query
          name: product-name
          schema:
            type: string
          description: Filtrar productos por nombre.
        - in: query
          name: sort
          schema:
            type: string
          description: Campo para ordenar.
        - in: query
          name: direction
          schema:
            type: string
            enum: [asc, desc]
          description: Dirección del ordenamiento.
        - in: query
          name: page
          schema:
            type: integer
          description: Número de página para la paginación.
        - in: query
          name: limit
          schema:
            type: integer
          description: Número de productos por página.
        - in: query
          name: fields
          schema:
            type: string
          description: Campos a incluir en la respuesta, separados por comas.
      responses:
        '200':
          description: Lista de productos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  totalRecords:
                    type: integer
                    description: Número total de productos.
                  totalPages:
                    type: integer
                    description: Número total de páginas.
                  currentPage:
                    type: integer
                    description: Número de la página actual.
    post:
      summary: Crear un nuevo producto
      description: Agregar un nuevo producto a la base de datos.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                product:
                  type: string
                  description: Nombre del producto.
                precio:
                  type: number
                  description: Precio del producto.
                picture:
                  type: string
                  format: binary
                  description: Imagen del producto.
                tags:
                  type: string
                  description: Lista de etiquetas separadas por comas.
      responses:
        '201':
          description: Producto creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /api/products/{productId}:
    get:
      summary: Recuperar un producto por ID
      description: Obtener los detalles de un producto específico por su ID.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID del producto.
      responses:
        '200':
          description: Detalles del producto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado.
    put:
      summary: Actualizar un producto por ID
      description: Actualizar los detalles de un producto existente.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID del producto.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                product:
                  type: string
                  description: Nombre actualizado del producto.
                precio:
                  type: number
                  description: Precio actualizado del producto.
                picture:
                  type: string
                  format: binary
                  description: Imagen actualizada del producto.
                tags:
                  type: string
                  description: Lista de etiquetas actualizadas separadas por comas.
      responses:
        '200':
          description: Producto actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado.
    delete:
      summary: Eliminar un producto por ID
      description: Eliminar un producto de la base de datos utilizando su ID.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID del producto.
      responses:
        '200':
          description: Producto eliminado exitosamente.
        '404':
          description: Producto no encontrado.

  /api/products/user/{userId}:
    get:
      summary: Recuperar productos por ID de usuario
      description: Obtener una lista de productos creados por un usuario específico.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario.
        - in: query
          name: fields
          schema:
            type: string
          description: Campos a incluir en la respuesta, separados por comas.
      responses:
        '200':
          description: Lista de productos por usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  totalRecords:
                    type: integer
                    description: Número total de productos por usuario.
        '404':
          description: Usuario no encontrado.

  /api/users:
    get:
      summary: Recuperar una lista de usuarios
      description: Obtener una lista de usuarios con filtros y ordenamientos opcionales.
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Filtrar por nombre de usuario.
        - in: query
          name: country
          schema:
            type: string
          description: Filtrar por país del usuario.
        - in: query
          name: sort
          schema:
            type: string
          description: Campo para ordenar (por ejemplo, nombre, email, país, createdAt).
        - in: query
          name: fields
          schema:
            type: string
          description: Campos a incluir en la respuesta, separados por comas.
      responses:
        '200':
          description: Lista de usuarios.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalRecords:
                    type: integer
                    description: Número total de usuarios.
    post:
      summary: Crear un nuevo usuario
      description: Agregar un nuevo usuario a la base de datos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Email del usuario.
                password:
                  type: string
                  description: Contraseña del usuario.
                name:
                  type: string
                  description: Nombre del usuario.
                country:
                  type: string
                  description: País del usuario.
      responses:
        '201':
          description: Usuario creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/{userId}:
    put:
      summary: Actualizar un usuario por ID
      description: Actualizar los detalles de un usuario existente.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Email actualizado del usuario.
                name:
                  type: string
                  description: Nombre actualizado del usuario.
                country:
                  type: string
                  description: País actualizado del usuario.
      responses:
        '200':
          description: Usuario actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado.

  /api/users-change-password/{userId}:
    put:
      summary: Cambiar la contraseña de un usuario
      description: Cambiar la contraseña de un usuario existente.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currenPassword:
                  type: string
                  description: Contraseña actual del usuario.
                newPassword:
                  type: string
                  description: Nueva contraseña del usuario.
                confirmedNewPassword:
                  type: string
                  description: Confirmación de la nueva contraseña.
      responses:
        '200':
          description: Contraseña actualizada exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: Mensaje de éxito.
        '400':
          description: Solicitud incorrecta (por ejemplo, las contraseñas no coinciden o la contraseña actual es incorrecta).
        '404':
          description: Usuario no encontrado.

components:
  schemas:
    Product:
      type: object
      properties:
        product:
          type: string
          description: Nombre del producto.
        precio:
          type: number
          description: Precio del producto.
        picture:
          type: string
          description: URL o ruta de la imagen del producto.
        tags:
          type: array
          items:
            type: string
          description: Etiquetas asociadas al producto.
        owner:
          type: string
          description: ID del usuario que posee el producto.
        createdAt:
          type: string
          format: date-time
          description: Fecha y hora de creación del producto.
        updatedAt:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización del producto.

    User:
      type: object
      properties:
        id:
          type: string
          description: ID del usuario.
        email:
          type: string
          description: Email del usuario.
        name:
          type: string
          description: Nombre del usuario.
        country:
          type: string
          description: País del usuario.
        createdAt:
          type: string
          format: date-time
          description: Fecha y hora de creación del usuario.
        updatedAt:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización del usuario.
